{"version":3,"file":"knockout-decorators.esm.min.js","sources":["../src/common-functions.ts","../src/event-property.ts","../src/property-extenders.ts","../src/observable-property.ts","../src/observable-array.ts","../src/knockout-decorators.ts"],"sourcesContent":["/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\n\r\nconst prefix = \"__ko_decorators_\";\r\n\r\nexport let PATCHED_KEY: string | symbol = prefix + \"patched__\";\r\nexport let EXTENDERS_KEY: string | symbol = prefix + \"extenders__\";\r\nexport let SUBSCRIPTIONS_KEY: string | symbol = prefix + \"subscriptions__\";\r\n\r\nif (typeof Symbol !== \"undefined\") {\r\n  PATCHED_KEY = Symbol(PATCHED_KEY);\r\n  EXTENDERS_KEY = Symbol(EXTENDERS_KEY);\r\n  SUBSCRIPTIONS_KEY = Symbol(SUBSCRIPTIONS_KEY);\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const ArrayPrototype = Array.prototype;\r\n\r\nexport function defineProperty(instance: Object, key: any, descriptor: PropertyDescriptor) {\r\n  descriptor.configurable = true;\r\n  Object.defineProperty(instance, key, descriptor);\r\n}\r\n\r\nexport const extendObject = ko.utils.extend;\r\nexport const objectForEach = ko.utils.objectForEach;\r\nexport const isArray = Array.isArray.bind(Array);\r\nexport const getPrototypeOf = Object.getPrototypeOf.bind(Object);\r\nexport const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor.bind(Object);\r\nexport const hasOwnProperty = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\r\nexport const arraySlice = Function.prototype.call.bind(ArrayPrototype.slice);\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { arraySlice, defineProperty } from \"./common-functions\";\r\nimport { EventType } from \"./knockout-decorators\";\r\n\r\nexport function defineEventProperty(instance: Object, key: string | symbol) {\r\n  const subscribable = new ko.subscribable<any[]>();\r\n\r\n  const event: EventType = function () {\r\n    const eventArgs = arraySlice(arguments);\r\n    subscribable.notifySubscribers(eventArgs);\r\n  } as any;\r\n\r\n  event.subscribe = function (callback: Function) {\r\n    return subscribable.subscribe(function (eventArgs: any[]) {\r\n      callback.apply(null, eventArgs);\r\n    });\r\n  };\r\n\r\n  defineProperty(instance, key, {\r\n    value: event,\r\n  });\r\n\r\n  return event;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport { EXTENDERS_KEY, extendObject, hasOwnProperty, objectForEach } from \"./common-functions\";\r\n\r\ntype Extender = Object | Function;\r\n\r\ninterface ExtendersDictionary {\r\n  [propName: string]: Extender[];\r\n}\r\n\r\nexport function applyExtenders(\r\n  instance: Object, key: string | symbol,\r\n  target: KnockoutObservable<any> | KnockoutComputed<any>,\r\n) {\r\n  const dictionary = instance[EXTENDERS_KEY] as ExtendersDictionary;\r\n  const extenders = dictionary && dictionary[key as any];\r\n  if (extenders) {\r\n    extenders.forEach((extender) => {\r\n      const koExtender = extender instanceof Function\r\n        ? extender.call(instance) : extender;\r\n\r\n      target = target.extend(koExtender);\r\n    });\r\n  }\r\n  return target;\r\n}\r\n\r\nexport function defineExtenders(\r\n  prototype: Object, key: string | symbol,\r\n  extendersOrFactory: Object | Function,\r\n) {\r\n  let dictionary = prototype[EXTENDERS_KEY] as ExtendersDictionary;\r\n  // if there is no ExtendersDictionary or ExtendersDictionary lives in base class prototype\r\n  if (!hasOwnProperty(prototype, EXTENDERS_KEY)) {\r\n    // clone ExtendersDictionary from base class prototype or create new ExtendersDictionary\r\n    prototype[EXTENDERS_KEY] = dictionary = extendObject({}, dictionary) as ExtendersDictionary;\r\n    // clone Extenders arrays for each property key\r\n    objectForEach(dictionary, (existingKey, extenders) => {\r\n      dictionary[existingKey] = [...extenders];\r\n    });\r\n  }\r\n  // get existing Extenders array or create new array\r\n  const currentExtenders = dictionary[key as any] || (dictionary[key as any] = []);\r\n  // add new Extenders\r\n  currentExtenders.push(extendersOrFactory);\r\n}\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n  defineProperty, getPrototypeOf, hasOwnProperty, isArray, objectForEach, PATCHED_KEY,\r\n} from \"./common-functions\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\nexport function defineObservableProperty(\r\n  instance: Object, key: string | symbol, value: any, deep: boolean, expose: boolean,\r\n) {\r\n  const observable = applyExtenders(instance, key, ko.observable());\r\n\r\n  let setter = observable as any;\r\n\r\n  if (deep) {\r\n    setter = function (newValue: any) {\r\n      observable(prepareDeepValue(newValue, expose));\r\n    };\r\n  }\r\n\r\n  defineProperty(instance, key, {\r\n    enumerable: true,\r\n    get: observable,\r\n    set: setter,\r\n  });\r\n  if (expose) {\r\n    defineProperty(instance, \"_\" + String(key), {\r\n      value: observable,\r\n    });\r\n  }\r\n\r\n  setter(value);\r\n}\r\n\r\nexport function prepareDeepValue(value: any, expose: boolean) {\r\n  if (typeof value === \"object\") {\r\n    if (isArray(value) || value === null) {\r\n      // value is Array or null\r\n      return value;\r\n    } else if (hasOwnProperty(value, \"constructor\")) {\r\n      // there is redefined own property \"constructor\"\r\n      const prototype = getPrototypeOf(value);\r\n      if (prototype === Object.prototype || prototype === null) {\r\n        // value is plain Object\r\n        return prepareDeepObject(value, expose);\r\n      }\r\n    } else if (value.constructor === Object) {\r\n      // value is plain Object\r\n      return prepareDeepObject(value, expose);\r\n    }\r\n  }\r\n  // value is primitive, function or class instance\r\n  return value;\r\n}\r\n\r\nexport function prepareDeepObject(instance: Object, expose: boolean) {\r\n  if (!hasOwnProperty(instance, PATCHED_KEY)) {\r\n    // mark instance as ObservableObject\r\n    defineProperty(instance, PATCHED_KEY, {\r\n      value: true,\r\n    });\r\n    // define deep observable properties\r\n    objectForEach(instance, (key, value) => {\r\n      if (isArray(value)) {\r\n        defineObservableArray(instance, key, value, true, expose);\r\n      } else {\r\n        defineObservableProperty(instance, key, value, true, expose);\r\n      }\r\n    });\r\n  }\r\n  return instance;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { ArrayPrototype, arraySlice, defineProperty, hasOwnProperty, isArray, PATCHED_KEY } from \"./common-functions\";\r\nimport { prepareDeepValue } from \"./observable-property\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\ntype ObsArray = KnockoutObservableArray<any> & { [fnName: string]: Function };\r\n\r\nconst deepArrayMethods = [\"pop\", \"reverse\", \"shift\", \"sort\"];\r\nconst allArrayMethods = [...deepArrayMethods, \"push\", \"splice\", \"unshift\"];\r\n\r\nconst deepObservableArrayMethods = [\"remove\", \"removeAll\", \"destroy\", \"destroyAll\", \"replace\", \"subscribe\"];\r\nconst allObservableArrayMethods = [...deepObservableArrayMethods, \"replace\"];\r\n\r\nconst allMethods = [...allArrayMethods, ...allObservableArrayMethods, \"mutate\", \"set\"];\r\n\r\nexport function defineObservableArray(\r\n  instance: Object, key: string | symbol, value: any[], deep: boolean, expose: boolean,\r\n) {\r\n  const obsArray = applyExtenders(instance, key, ko.observableArray()) as ObsArray;\r\n\r\n  let insideObsArray = false;\r\n\r\n  defineProperty(instance, key, {\r\n    enumerable: true,\r\n    get: obsArray,\r\n    set: setter,\r\n  });\r\n  if (expose) {\r\n    defineProperty(instance, \"_\" + String(key), {\r\n      value: obsArray,\r\n    });\r\n  }\r\n\r\n  setter(value);\r\n\r\n  function setter(newValue: any[]) {\r\n    const lastValue = obsArray.peek();\r\n    // if we got new value\r\n    if (lastValue !== newValue) {\r\n      if (isArray(lastValue)) {\r\n        // if lastValue array methods were already patched\r\n        if (hasOwnProperty(lastValue, PATCHED_KEY)) {\r\n          delete lastValue[PATCHED_KEY];\r\n          // clear patched array methods on lastValue (see unit tests)\r\n          allMethods.forEach((fnName) => {\r\n            delete lastValue[fnName];\r\n          });\r\n        }\r\n      }\r\n      if (isArray(newValue)) {\r\n        // if new value array methods were already connected with another @observable\r\n        if (hasOwnProperty(newValue, PATCHED_KEY)) {\r\n          // clone new value to prevent corruption of another @observable (see unit tests)\r\n          newValue = [...newValue];\r\n        }\r\n        // if deep option is set\r\n        if (deep) {\r\n          // make all array items deep observable\r\n          for (let i = 0; i < newValue.length; ++i) {\r\n            newValue[i] = prepareDeepValue(newValue[i], expose);\r\n          }\r\n        }\r\n        // mark instance as ObservableArray\r\n        defineProperty(newValue, PATCHED_KEY, {\r\n          value: true,\r\n        });\r\n        // call ko.observableArray.fn[fnName] instead of Array.prototype[fnName]\r\n        patchArrayMethods(newValue);\r\n      }\r\n    }\r\n    // update obsArray contents\r\n    insideObsArray = true;\r\n    obsArray(newValue);\r\n    insideObsArray = false;\r\n  }\r\n\r\n  function patchArrayMethods(array: any[]) {\r\n    const arrayMethods = deep ? deepArrayMethods : allArrayMethods;\r\n\r\n    arrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n      value() {\r\n        if (insideObsArray) {\r\n          return ArrayPrototype[fnName].apply(array, arguments);\r\n        }\r\n        insideObsArray = true;\r\n        const result = obsArray[fnName].apply(obsArray, arguments);\r\n        insideObsArray = false;\r\n        return result;\r\n      },\r\n    }));\r\n\r\n    const observableArrayMethods = deep ? deepObservableArrayMethods : allObservableArrayMethods;\r\n\r\n    observableArrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n      value() {\r\n        insideObsArray = true;\r\n        const result = obsArray[fnName].apply(obsArray, arguments);\r\n        insideObsArray = false;\r\n        return result;\r\n      },\r\n    }));\r\n\r\n    if (deep) {\r\n      defineProperty(array, \"push\", {\r\n        value() {\r\n          if (insideObsArray) {\r\n            return ArrayPrototype.push.apply(array, arguments);\r\n          }\r\n          const args = arraySlice(arguments);\r\n          for (let i = 0; i < args.length; ++i) {\r\n            args[i] = prepareDeepValue(args[i], expose);\r\n          }\r\n          insideObsArray = true;\r\n          const result = obsArray.push.apply(obsArray, args);\r\n          insideObsArray = false;\r\n          return result;\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"unshift\", {\r\n        value() {\r\n          if (insideObsArray) {\r\n            return ArrayPrototype.unshift.apply(array, arguments);\r\n          }\r\n          const args = arraySlice(arguments);\r\n          for (let i = 0; i < args.length; ++i) {\r\n            args[i] = prepareDeepValue(args[i], expose);\r\n          }\r\n          insideObsArray = true;\r\n          const result = obsArray.unshift.apply(obsArray, args);\r\n          insideObsArray = false;\r\n          return result;\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"splice\", {\r\n        value() {\r\n          if (insideObsArray) {\r\n            return ArrayPrototype.splice.apply(array, arguments);\r\n          }\r\n\r\n          let result: any[];\r\n\r\n          insideObsArray = true;\r\n          switch (arguments.length) {\r\n            case 0:\r\n            case 1:\r\n            case 2: {\r\n              result = obsArray.splice.apply(obsArray, arguments);\r\n              break;\r\n            }\r\n            case 3: {\r\n              result = obsArray.splice(\r\n                arguments[0], arguments[1], prepareDeepValue(arguments[2], expose),\r\n              );\r\n              break;\r\n            }\r\n            default: {\r\n              const args = arraySlice(arguments);\r\n              for (let i = 2; i < args.length; ++i) {\r\n                args[i] = prepareDeepValue(args[i], expose);\r\n              }\r\n              result = obsArray.splice.apply(obsArray, arguments);\r\n              break;\r\n            }\r\n          }\r\n          insideObsArray = false;\r\n\r\n          return result;\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"replace\", {\r\n        value(oldItem: any, newItem: any) {\r\n          insideObsArray = true;\r\n          const result = obsArray.replace(oldItem, prepareDeepValue(newItem, expose));\r\n          insideObsArray = false;\r\n          return result;\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"mutate\", {\r\n        value(mutator: (array?: any[]) => void) {\r\n          const nativeArray = obsArray.peek();\r\n          // it is defined for ko.observableArray\r\n          (obsArray.valueWillMutate as Function)();\r\n          mutator(nativeArray);\r\n          for (let i = 0; i < nativeArray.length; ++i) {\r\n            nativeArray[i] = prepareDeepValue(nativeArray[i], expose);\r\n          }\r\n          // it is defined for ko.observableArray\r\n          (obsArray.valueHasMutated as Function)();\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"set\", {\r\n        value(index: number, newItem: any) {\r\n          return obsArray.splice(index, 1, prepareDeepValue(newItem, expose))[0];\r\n        },\r\n      });\r\n    } else {\r\n      defineProperty(array, \"mutate\", {\r\n        value(mutator: (array?: any[]) => void) {\r\n          // it is defined for ko.observableArray\r\n          (obsArray.valueWillMutate as Function)();\r\n          mutator(obsArray.peek());\r\n          // it is defined for ko.observableArray\r\n          (obsArray.valueHasMutated as Function)();\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"set\", {\r\n        value(index: number, newItem: any) {\r\n          return obsArray.splice(index, 1, newItem)[0];\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n * Version: 1.2.1\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n  defineProperty, extendObject, getOwnPropertyDescriptor, hasOwnProperty, isArray, PATCHED_KEY, SUBSCRIPTIONS_KEY,\r\n} from \"./common-functions\";\r\nimport { defineEventProperty } from \"./event-property\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { defineObservableProperty } from \"./observable-property\";\r\nimport { applyExtenders, defineExtenders } from \"./property-extenders\";\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden ko.observableArray will be created\r\n */\r\nexport function observable(options: { deep?: boolean, expose?: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow) ko.observableArray will be created\r\n */\r\nexport function observable(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow or deep) ko.observableArray will be created\r\n */\r\nexport function observable(prototypeOrOptions: any, key?: any) {\r\n  observableArrayOption = false;\r\n  deepObservableOption = false;\r\n  exposeObservableOption = false;\r\n  if (arguments.length === 1) {\r\n    deepObservableOption = prototypeOrOptions.deep;\r\n    exposeObservableOption = prototypeOrOptions.expose;\r\n    return observableDecorator;\r\n  }\r\n  return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(options: { deep?: boolean, expose?: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototypeOrOptions: any, key?: any) {\r\n  observableArrayOption = true;\r\n  deepObservableOption = false;\r\n  exposeObservableOption = false;\r\n  if (arguments.length === 1) {\r\n    deepObservableOption = prototypeOrOptions.deep;\r\n    exposeObservableOption = prototypeOrOptions.expose;\r\n    return observableDecorator;\r\n  }\r\n  return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n// observableDecorator options\r\nlet observableArrayOption: boolean;\r\nlet deepObservableOption: boolean;\r\nlet exposeObservableOption: boolean;\r\n\r\nfunction observableDecorator(prototype: Object, propKey: string | symbol) {\r\n  const array = observableArrayOption;\r\n  const deep = deepObservableOption;\r\n  const expose = exposeObservableOption;\r\n  defineProperty(prototype, propKey, {\r\n    get() {\r\n      throw new Error(\"@observable property '\" + String(propKey) + \"' was not initialized\");\r\n    },\r\n    set(this: Object, value: any) {\r\n      if (array || isArray(value)) {\r\n        defineObservableArray(this, propKey, value, deep, expose);\r\n      } else {\r\n        defineObservableProperty(this, propKey, value, deep, expose);\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nexport interface ObservableArray<T> extends Array<T> {\r\n  replace(oldItem: T, newItem: T): void;\r\n\r\n  remove(item: T): T[];\r\n  remove(removeFunction: (item: T) => boolean): T[];\r\n\r\n  removeAll(): T[];\r\n  removeAll(items: T[]): T[];\r\n\r\n  destroy(item: T): void;\r\n  destroy(destroyFunction: (item: T) => boolean): void;\r\n\r\n  destroyAll(): void;\r\n  destroyAll(items: T[]): void;\r\n\r\n  subscribe(callback: (val: T[]) => void): KnockoutSubscription;\r\n  subscribe(callback: (val: T[]) => void, callbackTarget: any): KnockoutSubscription;\r\n  subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): KnockoutSubscription;\r\n\r\n  /**\r\n   * Run mutator function that can write to array at some index (`array[index] = value;`)\r\n   * Then notify about observableArray changes\r\n   */\r\n  mutate(mutator: (arrayValue: T[]) => void): void;\r\n\r\n  /**\r\n   * Replace value at some index and return old value\r\n   */\r\n  set(index: number, value: T): T;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(options: { pure: boolean }): PropertyDecorator;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototype: Object, key: string | symbol, desc?: PropertyDescriptor): PropertyDescriptor;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototypeOrOptinos: any, key?: any, propDesc?: any): any {\r\n  computedDecoratorOptions = { pure: true };\r\n\r\n  if (arguments.length === 1) {\r\n    computedDecoratorOptions = prototypeOrOptinos;\r\n    return computedDecorator;\r\n  }\r\n  return computedDecorator(prototypeOrOptinos, key, propDesc);\r\n}\r\n\r\n// computedDecorator options\r\nlet computedDecoratorOptions: { pure: boolean };\r\n\r\nfunction computedDecorator(prototype: Object, propKey: string | symbol, desc: PropertyDescriptor) {\r\n  const options = computedDecoratorOptions;\r\n  const { get, set } = desc || (desc = getOwnPropertyDescriptor(prototype, propKey));\r\n  if (!get) {\r\n    throw new Error(\"@computed property '\" + String(propKey) + \"' has no getter\");\r\n  }\r\n  desc.get = function (this: Object) {\r\n    const koComputed = applyExtenders(this, propKey, ko.computed(get, this, options));\r\n    defineProperty(this, propKey, {\r\n      get: koComputed,\r\n      // tslint:disable-next-line:object-literal-shorthand\r\n      set: set,\r\n    });\r\n    return koComputed();\r\n  };\r\n  return desc;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extenders: Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extendersFactory: () => Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n * @extendersOrFactory { Object | Function } Knockout extenders definition or factory that produces definition\r\n */\r\nexport function extend(extendersOrFactory: Object | Function) {\r\n  return function (prototype: Object, key: string | symbol) {\r\n    defineExtenders(prototype, key, extendersOrFactory);\r\n  };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\nexport type ComponentConstructor = new (\r\n  params?: any,\r\n  element?: Node,\r\n  templateNodes?: Node[],\r\n) => any;\r\n\r\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\r\n\r\nexport type TemplateConfig = (\r\n  string\r\n  | Node[]\r\n  | DocumentFragment\r\n  | { require: string }\r\n  | { element: string | Node }\r\n);\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n  name: string,\r\n  options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n  name: string,\r\n  template: TemplateConfig,\r\n  options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n  name: string,\r\n  template: TemplateConfig,\r\n  styles: string | string[],\r\n  options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n * @param name {String} Name of component\r\n * @param template {Any} Knockout template definition\r\n * @param styles {Any} Ignored parameter (used for `require()` styles by webpack etc.)\r\n * @param options {Object} Another options that passed directly to `ko.components.register()`\r\n */\r\nexport function component(\r\n  name: string,\r\n  template?: any,\r\n  styles?: any,\r\n  options?: Object,\r\n) {\r\n  if (options === void 0) {\r\n    if (styles === void 0) {\r\n      if (typeof template === \"object\"\r\n        && template.constructor === Object\r\n        && !(\"require\" in template)\r\n        && !(\"element\" in template)\r\n      ) {\r\n        options = template;\r\n        template = void 0;\r\n      }\r\n    } else if (typeof styles === \"object\") {\r\n      options = styles;\r\n      styles = void 0;\r\n    }\r\n  }\r\n\r\n  return function (constructor: ComponentConstructor) {\r\n    ko.components.register(name, extendObject({\r\n      viewModel: constructor.length < 2 ? constructor : {\r\n        createViewModel(params: any, {\r\n          element, templateNodes,\r\n        }: {\r\n            element: Node, templateNodes: Node[],\r\n          }) {\r\n          return new constructor(params, element, templateNodes);\r\n        },\r\n      },\r\n      template: template || \"<!---->\",\r\n      synchronous: true,\r\n    }, options as Object));\r\n  };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Like https://github.com/jayphelps/core-decorators.js @autobind but less smart and complex\r\n * Do NOT use with ES6 inheritance!\r\n */\r\nexport function autobind(prototype: Object, key: string | symbol, desc?: PropertyDescriptor) {\r\n  const { value, configurable, enumerable } = desc || (desc = getOwnPropertyDescriptor(prototype, key));\r\n  return {\r\n    // tslint:disable-next-line:object-literal-shorthand\r\n    configurable: configurable,\r\n    // tslint:disable-next-line:object-literal-shorthand\r\n    enumerable: enumerable,\r\n    get(this: Object) {\r\n      if (this === prototype) {\r\n        return value;\r\n      }\r\n      const bound = value.bind(this);\r\n      defineProperty(this, key, {\r\n        value: bound,\r\n      });\r\n      return bound;\r\n    },\r\n  } as PropertyDescriptor;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Define hidden ko.subscribable, that notifies subscribers when decorated method is invoked\r\n */\r\nexport function event(prototype: Object, key: string | symbol) {\r\n  defineProperty(prototype, key, {\r\n    get(this: Object) {\r\n      return defineEventProperty(this, key);\r\n    },\r\n  });\r\n}\r\n\r\nexport type EventType = Function & {\r\n  subscribe(callback: Function): KnockoutSubscription;\r\n};\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n  dependencyOrEvent: () => T,\r\n  callback: (value: T) => void,\r\n  options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to `@observableArray` dependency \"arrayChange\" event\r\n */\r\nexport function subscribe<T>(\r\n  dependency: () => T[],\r\n  callback: (value: {\r\n    status: \"added\" | \"deleted\";\r\n    value: T;\r\n    index: number;\r\n  }[]) => void,\r\n  options: { once?: boolean, event: \"arrayChange\" },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n  event: (arg: T) => void,\r\n  callback: (arg: T) => void,\r\n  options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2>(\r\n  event: (arg1: T1, arg2: T2) => void,\r\n  callback: (arg1: T1, arg2: T2) => void,\r\n  options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2, T3>(\r\n  event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n  callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n  options?: { once?: boolean },\r\n): KnockoutSubscription;\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event`\r\n */\r\nexport function subscribe(\r\n  dependencyOrEvent: Function,\r\n  callback: (...args: any[]) => void,\r\n  options?: { once?: boolean, event?: \"change\" | \"beforeChange\" | \"arrayChange\" },\r\n) {\r\n  const once = options && options.once || false;\r\n\r\n  if (hasOwnProperty(dependencyOrEvent, \"subscribe\")) {\r\n    // overload: subscribe to @event property\r\n    const eventFunc = dependencyOrEvent as EventType;\r\n\r\n    if (once) {\r\n      const subscription = eventFunc.subscribe(function () {\r\n        subscription.dispose();\r\n        callback.apply(null, arguments);\r\n      });\r\n      return subscription;\r\n    } else {\r\n      return eventFunc.subscribe(callback);\r\n    }\r\n  } else {\r\n    // overload: subscribe to @observable or @computed\r\n    const eventFunc = options && options.event || \"change\";\r\n\r\n    let handler: (value: any) => void;\r\n    let subscription: KnockoutSubscription;\r\n\r\n    if (once) {\r\n      handler = function () {\r\n        subscription.dispose();\r\n        callback.apply(null, arguments);\r\n      };\r\n    } else {\r\n      handler = callback;\r\n    }\r\n\r\n    if (eventFunc === \"arrayChange\") {\r\n      const obsArray = dependencyOrEvent() as ObservableArray<any>;\r\n\r\n      if (isArray(obsArray) && hasOwnProperty(obsArray, PATCHED_KEY)) {\r\n        subscription = obsArray.subscribe(handler, null, eventFunc);\r\n      } else {\r\n        throw new Error(\"Can not subscribe to 'arrayChange' because dependency is not an 'observableArray'\");\r\n      }\r\n    } else {\r\n      const koComputed = ko.computed(dependencyOrEvent as () => any).extend({ notify: \"always\" });\r\n\r\n      subscription = koComputed.subscribe(handler, null, eventFunc);\r\n\r\n      const originalDispose = subscription.dispose;\r\n      // dispose hidden computed with subscription\r\n      subscription.dispose = function (this: KnockoutSubscription) {\r\n        originalDispose.call(this);\r\n        koComputed.dispose();\r\n      };\r\n    }\r\n    return subscription;\r\n  }\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol): any;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap<T>(instance: Object, key: string | symbol): KnockoutObservable<T>;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol) {\r\n  if (!hasOwnProperty(instance, key)) {\r\n    // invoke getter on instance.__proto__ that defines property on instance\r\n    // tslint:disable-next-line:no-unused-expression\r\n    instance[key];\r\n  }\r\n  return getOwnPropertyDescriptor(instance, key).get;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n */\r\nexport interface Disposable {\r\n  /** Dispose all subscriptions from this class */\r\n  dispose(): void;\r\n\r\n  /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property */\r\n  subscribe<T>(\r\n    dependencyOrEvent: () => T,\r\n    callback: (value: T) => void,\r\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n  ): KnockoutSubscription;\r\n  /** Subscribe callback to `@observableArray` dependency \"arrayChange\" event */\r\n  subscribe<T>(\r\n    dependency: () => T[],\r\n    callback: (value: {\r\n      status: \"added\" | \"deleted\";\r\n      value: T;\r\n      index: number;\r\n    }[]) => void,\r\n    options: { once?: boolean, event: \"arrayChange\" },\r\n  ): KnockoutSubscription;\r\n  /** Subscribe callback to some `@event` property */\r\n  subscribe<T>(\r\n    event: (arg: T) => void,\r\n    callback: (arg: T) => void,\r\n    options?: { once?: boolean },\r\n  ): KnockoutSubscription;\r\n  /** Subscribe callback to some `@event` property */\r\n  subscribe<T1, T2>(\r\n    event: (arg1: T1, arg2: T2) => void,\r\n    callback: (arg1: T1, arg2: T2) => void,\r\n    options?: { once?: boolean },\r\n  ): KnockoutSubscription;\r\n  /** Subscribe callback to some `@event` property */\r\n  subscribe<T1, T2, T3>(\r\n    event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    options?: { once?: boolean },\r\n  ): KnockoutSubscription;\r\n\r\n  /** Get internal ko.observable() for class property decodated by `@observable` */\r\n  unwrap(key: string | symbol): any;\r\n  /** Get internal ko.observable() for class property decodated by `@observable` */\r\n  unwrap<T>(key: string | symbol): KnockoutObservable<T>;\r\n}\r\n\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n */\r\nexport function Disposable(): new () => Disposable;\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n * @param Base {Function} Base class to extend\r\n */\r\nexport function Disposable<T extends Function>(\r\n  // tslint:disable-next-line:variable-name\r\n  Base: T,\r\n): (new (...args: any[]) => Disposable) & T;\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n * @param Base {Function} Base class to extend\r\n */\r\nexport function Disposable<T extends new (...args: any[]) => any>(\r\n  // tslint:disable-next-line:variable-name\r\n  Base?: T,\r\n) {\r\n  if (typeof Base === \"undefined\") {\r\n    Base = class { } as T;\r\n  }\r\n  return class extends Base {\r\n    /** Dispose all subscriptions from this class */\r\n    dispose() {\r\n      const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY as any];\r\n      if (subscriptions) {\r\n        subscriptions.forEach((subscription) => {\r\n          subscription.dispose();\r\n        });\r\n        delete this[SUBSCRIPTIONS_KEY as any];\r\n      }\r\n    }\r\n\r\n    /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` */\r\n    subscribe() {\r\n      const subscription: KnockoutSubscription = subscribe.apply(null, arguments);\r\n      const subscriptions: KnockoutSubscription[] = this[SUBSCRIPTIONS_KEY as any] ||\r\n        (this[SUBSCRIPTIONS_KEY as any] = []);\r\n      subscriptions.push(subscription);\r\n      return subscription;\r\n    }\r\n\r\n    /** Get internal ko.observable() for class property decodated by `@observable` */\r\n    unwrap(key: string) {\r\n      return unwrap(this, key);\r\n    }\r\n  };\r\n}\r\n"],"names":["prefix","PATCHED_KEY","EXTENDERS_KEY","SUBSCRIPTIONS_KEY","Symbol","ArrayPrototype","Array","prototype","instance","key","descriptor","configurable","Object","defineProperty","extendObject","ko.utils","extend","objectForEach","isArray","bind","getPrototypeOf","getOwnPropertyDescriptor","hasOwnProperty","Function","call","arraySlice","slice","subscribable","ko.subscribable","event","eventArgs","arguments","notifySubscribers","subscribe","callback","apply","value","target","dictionary","extenders","forEach","extender","koExtender","extendersOrFactory","existingKey","push","deep","expose","observable","applyExtenders","ko.observable","setter","newValue","prepareDeepValue","enumerable","get","set","String","prepareDeepObject","constructor","defineObservableArray","defineObservableProperty","deepArrayMethods","allArrayMethods","deepObservableArrayMethods","allObservableArrayMethods","allMethods","obsArray","ko.observableArray","insideObsArray","lastValue","peek","fnName","i","length","array","[object Object]","result","args","unshift","splice","oldItem","newItem","replace","mutator","nativeArray","valueWillMutate","valueHasMutated","index","prototypeOrOptions","observableArrayOption","deepObservableOption","exposeObservableOption","observableDecorator","computedDecoratorOptions","propKey","Error","this","prototypeOrOptinos","propDesc","pure","computedDecorator","desc","options","koComputed","ko.computed","defineExtenders","name","template","styles","ko.components","register","viewModel","createViewModel","params","element","templateNodes","synchronous","bound","defineEventProperty","dependencyOrEvent","once","eventFunc","subscription","dispose","handler","notify","originalDispose","Base","subscriptions","unwrap"],"mappings":"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"}